import logging
from aiogram import Bot, Dispatcher, Router
from aiogram.types import Message, CallbackQuery, InlineKeyboardButton, InlineKeyboardMarkup
from aiogram.filters import Command
from stukt import Game, Mafia, DonMafia, Commissioner, Doctor, Villager, Lover, Kamikaze, Hobo, Judge, Maniac
import random
import sqlite3
from datetime import datetime, timedelta
from dotenv import load_dotenv
import os

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö
def connect_db():
    conn = sqlite3.connect("leaderboard.db")
    return conn

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)

# –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä—ã –±–æ—Ç–∞ –∏ –º–∞—Ä—à—Ä—É—Ç–∏–∑–∞—Ç–æ—Ä–∞
load_dotenv()
API_TOKEN = os.getenv("TELEGRAM_TOKEN")

bot = Bot(token=API_TOKEN)
dp = Dispatcher()
router = Router()
port = os.getenv('PORT', 10000)

# –•—Ä–∞–Ω–∏–ª–∏—â–µ –∞–∫—Ç–∏–≤–Ω—ã—Ö –∏–≥—Ä
active_games = {}
user_data = {}

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
def get_user_info(telegram_id):
    conn = connect_db()
    cursor = conn.cursor()
    cursor.execute("SELECT * FROM leaderboard WHERE telegram_id = ?", (telegram_id,))
    user = cursor.fetchone()
    conn.close()

    if user:
        if user[1] != "":
            return f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: *{user[2]} (@{user[1]})*\n–ß–∏—Å–ª–æ –æ—á–∫–æ–≤: *{user[3]}*\n–°—ã–≥—Ä–∞–Ω–æ –∏–≥—Ä: *{user[4]}*\n–í—ã–∏–≥—Ä–∞–Ω–æ –∏–≥—Ä: *{user[5]}*"
        else: return f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: [{user[2]}](tg://user?id={telegram_id})\n–ß–∏—Å–ª–æ –æ—á–∫–æ–≤: *{user[3]}*\n–°—ã–≥—Ä–∞–Ω–æ –∏–≥—Ä: *{user[4]}*\n–í—ã–∏–≥—Ä–∞–Ω–æ –∏–≥—Ä: *{user[5]}*"
    else:
        print(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å ID {telegram_id} –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        return None

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∏–≥—Ä–æ–∫–æ–≤ –≤ —Ç–∞–±–ª–∏—Ü—É
def add_pdb(message):
    conn = connect_db()
    cursor = conn.cursor()
    # –ï—Å–ª–∏ username –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç, –∑–∞–º–µ–Ω–∏—Ç—å –Ω–∞ —É–Ω–∏–∫–∞–ª—å–Ω—ã–π –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä
    username = message.from_user.username or ""
    cursor.execute("SELECT * FROM leaderboard WHERE telegram_id = ?", (message.from_user.id,))
    user = cursor.fetchone()

    if not user:
        # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ—Ç –≤ –±–∞–∑–µ, –¥–æ–±–∞–≤–ª—è–µ–º –µ–≥–æ
        cursor.execute('''
                    INSERT INTO leaderboard (telegram_id, username, full_name)
                    VALUES (?, ?, ?)
                ''', (message.from_user.id, username, message.from_user.full_name))
        print(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.full_name} –¥–æ–±–∞–≤–ª–µ–Ω –≤ –±–∞–∑—É.")
    else:
        print(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.full_name} —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –≤ –±–∞–∑–µ.")

    conn.commit()
    conn.close()

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≤—ã–≤–æ–¥–∞ —Ç–æ–ø-15 –ª–∏–¥–µ—Ä–æ–≤
def get_top_leaders():
    conn = connect_db()
    cursor = conn.cursor()
    cursor.execute('''
        SELECT username, full_name, points
        FROM leaderboard
        ORDER BY points DESC
        LIMIT 15
    ''')
    leaders = cursor.fetchall()
    conn.close()
    leaderboard_text = "üèÖ *–¢–æ–ø-15 –ª–∏–¥–µ—Ä–æ–≤:* üèÖ\n\n"
    leaderboard_text += "` # | –ò–≥—Ä–æ–∫       |   –û—á–∫–∏`\n"
    leaderboard_text += "`-------------------------`\n"

    for idx, (username, full_name, points) in enumerate(leaders, start=1):
        if username != "":
            leaderboard_text += f"`{idx:2} | @{username[:10]:<10} | {points:6}`\n"
        else:
            leaderboard_text += f"`{idx:2} | {full_name[:11]:<11} | {points:6}`\n"

    return leaderboard_text

# –ö–æ–º–∞–Ω–¥–∞ start
@router.message(Command(commands=['start']))
async def start_f(message: Message):
    add_pdb(message)

# –ö–æ–º–∞–Ω–¥–∞ help
@router.message(Command(commands=['help']))
async def help_f(message: Message):
    chat_id = message.chat.id
    txt = ("üìñ –ü—Ä–∞–≤–∏–ª–∞ –∏–≥—Ä—ã –∏ –∫–æ–º–∞–Ω–¥—ã –±–æ—Ç–∞\n\n"+
    "üîπ –ö–∞–∫ –Ω–∞—á–∞—Ç—å –∏–≥—Ä—É?\n"+
    "–°–æ–∑–¥–∞–π—Ç–µ –∏–≥—Ä—É: /newgame.\n"+
    "–ü—Ä–∏—Å–æ–µ–¥–∏–Ω—è–π—Ç–µ—Å—å: /join.\n"+
    "–ó–∞–ø—É—Å—Ç–∏—Ç–µ –∏–≥—Ä—É: /startgame.\n\n"+
    "üîπ –§–∞–∑—ã –∏–≥—Ä—ã:\n"+
    "–ù–æ—á—å: –ò–≥—Ä–æ–∫–∏ —Å –∞–∫—Ç–∏–≤–Ω—ã–º–∏ —Ä–æ–ª—è–º–∏ –≤—ã–ø–æ–ª–Ω—è—é—Ç –¥–µ–π—Å—Ç–≤–∏—è —á–µ—Ä–µ–∑ –ø—Ä–∏–≤–∞—Ç–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –±–æ—Ç–∞.\n"+
    "–î–µ–Ω—å: –í—Å–µ –æ–±—Å—É–∂–¥–∞—é—Ç —Å–æ–±—ã—Ç–∏—è –ø—Ä–æ–∏–∑–æ—à–µ–¥—à–∏–µ –Ω–æ—á—å—é –∏ –≥–æ–ª–æ—Å—É—é—Ç –∑–∞ –∏—Å–∫–ª—é—á–µ–Ω–∏–µ –ø–æ–¥–æ–∑—Ä–µ–≤–∞–µ–º–æ–≥–æ.\n\n"+
    "üîπ –û—Å–Ω–æ–≤–Ω—ã–µ —Ä–æ–ª–∏:\n"+
    "–ú–∞—Ñ–∏—è: –£–±–∏–≤–∞–µ—Ç –Ω–æ—á—å—é.\n"+
    "–î–æ–Ω –º–∞—Ñ–∏–∏: –ü—Ä–∏–Ω–∏–º–∞–µ—Ç —Ñ–∏–Ω–∞–ª—å–Ω–æ–µ —Ä–µ—à–µ–Ω–∏–µ –ø—Ä–∏ —Ä–∞–∑–Ω–æ–≥–ª–∞—Å–∏–∏ –º–∞—Ñ–∏–∏.\n"+
    "–ö–æ–º–∏—Å—Å–∞—Ä: –ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Ä–æ–ª–∏ –∏–≥—Ä–æ–∫–æ–≤.\n"+
    "–î–æ–∫—Ç–æ—Ä: –õ–µ—á–∏—Ç –∏–≥—Ä–æ–∫–æ–≤.\n"+
    "–ú–∏—Ä–Ω—ã–π –∂–∏—Ç–µ–ª—å: –ì–æ–ª–æ—Å—É–µ—Ç –¥–Ω—ë–º –∏ –∏—â–µ—Ç –º–∞—Ñ–∏—é.\n"+
    "–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Ä–æ–ª–∏ (–¥–ª—è –±–æ–ª—å—à–∏—Ö –∏–≥—Ä): –õ—é–±–æ–≤–Ω–∏—Ü–∞, –ö–∞–º–∏–∫–∞–¥–∑–µ, –ú–∞–Ω—å—è–∫, –°—É–¥—å—è, –ë–æ–º–∂.\n\n"+
    "üîπ –ö–æ–º–∞–Ω–¥—ã:\n"+
    "/newgame - –°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—É—é –∏–≥—Ä—É.\n"+
    "/endgame - –ó–∞–∫–æ–Ω—á–∏—Ç—å –∏–≥—Ä—É.\n" +
    "/join - –ü—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è –∫ —Ç–µ–∫—É—â–µ–π –∏–≥—Ä–µ.\n"+
    "/leave - –ü–æ–∫–∏–Ω—É—Ç—å –∏–≥—Ä—É –¥–æ –µ—ë –Ω–∞—á–∞–ª–∞.\n"+
    "/help - –ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–æ–º–∞–Ω–¥ –∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –±–æ—Ç–µ.\n"+
    "/startgame - –ù–∞—á–∞—Ç—å –∏–≥—Ä—É.\n"+
    "/leaderboard - –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Ç–∞–±–ª–∏—Ü—É –ª–∏–¥–µ—Ä–æ–≤.\n"+
    "/mystats - –£–∑–Ω–∞—Ç—å —Å–≤–æ–∏ –ª–∏—á–Ω—ã–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è\n\n"+
    "üîπ –ö–∞–∫ –Ω–∞—á–∏—Å–ª—è—é—Ç—Å—è –±–∞–ª–ª—ã?\n"+
    "–ü–æ–±–µ–¥–∞ –≤–∞—à–µ–π —Å—Ç–æ—Ä–æ–Ω—ã.\n"+
    "–ê–∫—Ç–∏–≤–Ω–æ–µ —É—á–∞—Å—Ç–∏–µ –≤ –¥–Ω–µ–≤–Ω—ã—Ö –æ–±—Å—É–∂–¥–µ–Ω–∏—è—Ö.\n"+
    "–£—Å–ø–µ—à–Ω–æ–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –¥–µ–π—Å—Ç–≤–∏–π —Ä–æ–ª–∏.\n\n"+
    "üîπ –¶–µ–ª—å –∏–≥—Ä—ã:\n"+
    "–ú–∏—Ä–Ω—ã–µ –ø–æ–±–µ–∂–¥–∞—é—Ç, –µ—Å–ª–∏ —É–Ω–∏—á—Ç–æ–∂–∞—Ç –≤—Å–µ—Ö –º–∞—Ñ–∏–π.\n"+
    "–ú–∞—Ñ–∏—è –ø–æ–±–µ–∂–¥–∞–µ—Ç, –µ—Å–ª–∏ –¥—Ä—É–≥–∏—Ö –∏–≥—Ä–æ–∫–æ–≤ –æ—Å—Ç–∞–Ω–µ—Ç—Å—è —Å—Ç–æ–ª—å–∫–æ –∂–µ —Å–∫–æ–ª—å–∫–æ –∏—Ö –∏–ª–∏ –º–µ–Ω—å—à–µ.\n"+
    "–ú–∞–Ω—å—è–∫ –ø–æ–±–µ–∂–¥–∞–µ—Ç, –µ—Å–ª–∏ –æ—Å—Ç–∞–Ω–µ—Ç—Å—è –µ–¥–∏–Ω—Å—Ç–≤–µ–Ω–Ω—ã–º –≤—ã–∂–∏–≤—à–∏–º.\n\n"+
    "–ò–≥—Ä–∞–π —á–µ—Å—Ç–Ω–æ, –±—É–¥—å –∞–∫—Ç–∏–≤–Ω—ã–º, –∏ —É–¥–∞—á–∏ –≤ –∏–≥—Ä–µ! üé≠")

    if message.chat.is_forum:
        await bot.send_message(chat_id=chat_id, message_thread_id=message.message_thread_id,
                               text=txt,
                               parse_mode="Markdown")
        return
    if not message.chat.is_forum:
        await bot.send_message(chat_id,
                               txt,
                               parse_mode="Markdown")
        return

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
@router.message(Command(commands=['mystats']))
async def stats_f(message: Message):
    chat_id = message.chat.id
    if message.chat.is_forum:
        await bot.send_message(chat_id=chat_id, message_thread_id=message.message_thread_id,
                               text=f"–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∏–≥—Ä–æ–∫–µ *{message.from_user.first_name}*:\n\n{get_user_info(message.from_user.id)}", parse_mode="Markdown")
        return
    if not message.chat.is_forum:
        await bot.send_message(chat_id, f"–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∏–≥—Ä–æ–∫–µ *{message.from_user.first_name}*:\n\n{get_user_info(message.from_user.id)}", parse_mode="Markdown")
        return



# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≤—ã–≤–æ–¥–∞ —Ç–æ–ø-15 –ª–∏–¥–µ—Ä–æ–≤
@router.message(Command(commands=['leaderboard']))
async def board_f(message: Message):
    chat_id = message.chat.id
    if message.chat.is_forum:
        await bot.send_message(chat_id=chat_id, message_thread_id=message.message_thread_id,
                               text=f"{get_top_leaders()}", parse_mode="Markdown")
        return
    if not message.chat.is_forum:
        await bot.send_message(chat_id=chat_id,
                               text=f"{get_top_leaders()}", parse_mode="Markdown")
        return

# –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –Ω–æ–≤–æ–π –∏–≥—Ä—ã
@router.message(Command(commands=['newgame']))
async def create_game(message: Message):
    chat_id = message.chat.id
    if chat_id == message.from_user.id:
        return

    if chat_id in active_games:
        await message.answer("–ò–≥—Ä–∞ —É–∂–µ —Å–æ–∑–¥–∞–Ω–∞. –í—ã –º–æ–∂–µ—Ç–µ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è –∏–ª–∏ –¥–æ–∂–¥–∞—Ç—å—Å—è –µ—ë –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è.")
        return
    if message.chat.is_forum:
        # –ü–æ–ª—É—á–µ–Ω–∏–µ ID —Ç–æ–ø–∏–∫–∞ (–µ—Å–ª–∏ —ç—Ç–æ –≥—Ä—É–ø–ø–∞ —Å –Ω–µ—Å–∫–æ–ª—å–∫–∏–º–∏ —Ç–µ–º–∞–º–∏)
        topic_id = message.message_thread_id
        game = Game()
        active_games[chat_id] = game
        game.creator_id = message.from_user.id
        game.topic_id = topic_id
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º ID —á–∞—Ç–∞ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ –¥–∞–ª—å–Ω–µ–π—à–µ–º
        game.chat_id = chat_id  # –°–æ—Ö—Ä–∞–Ω—è–µ–º ID —á–∞—Ç–∞ –≤ –æ–±—ä–µ–∫—Ç–µ –∏–≥—Ä—ã
    else:
        game = Game()
        active_games[chat_id] = game
        game.creator_id = message.from_user.id
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º ID —á–∞—Ç–∞ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ –¥–∞–ª—å–Ω–µ–π—à–µ–º
        game.chat_id = chat_id  # –°–æ—Ö—Ä–∞–Ω—è–µ–º ID —á–∞—Ç–∞ –≤ –æ–±—ä–µ–∫—Ç–µ –∏–≥—Ä—ã

    await message.answer("–ò–≥—Ä–∞ —Å–æ–∑–¥–∞–Ω–∞! –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /join, —á—Ç–æ–±—ã –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è. –ú–∏–Ω–∏–º—É–º 4 –∏–≥—Ä–æ–∫–∞.\n–î–ª—è –∏–≥—Ä—ã –∫–∞–∂–¥—ã–π –∏–≥—Ä–æ–∫ –¥–æ–ª–∂–µ–Ω –∑–∞–ø—É—Å—Ç–∏—Ç—å @ImpostIgor_wehbot")

# –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –∏–≥—Ä—ã
@router.message(Command(commands=['endgame']))
async def end_game(message: Message):
    chat_id = message.chat.id
    if chat_id == message.from_user.id:
        return

    if chat_id not in active_games:
        await message.answer("–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π –∏–≥—Ä—ã. –°–æ–∑–¥–∞–π—Ç–µ –∏–≥—Ä—É —Å –ø–æ–º–æ—â—å—é –∫–æ–º–∞–Ω–¥—ã /newgame.")
        return
    game = active_games[chat_id]
    active_games[chat_id].end_game()
    del game
    del active_games[chat_id]  # –ó–∞–≤–µ—Ä—à–∞–µ–º –∏–≥—Ä—É –∏ —É–¥–∞–ª—è–µ–º –∏–∑ –∞–∫—Ç–∏–≤–Ω—ã—Ö

    await message.answer("–ò–≥—Ä–∞ –ó–∞–∫–æ–Ω—á–µ–Ω–∞!")

# –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è –∫ –∏–≥—Ä–µ
@router.message(Command(commands=['join']))
async def join_game(message: Message):
    chat_id = message.chat.id
    add_pdb(message)
    if message.from_user.id  in user_data:
        del user_data[message.from_user.id]

    user_data[message.from_user.id] = {"timestamps": [], "last_message": ""}
    if chat_id == message.from_user.id:
        return

    if chat_id not in active_games:
        await message.answer("–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π –∏–≥—Ä—ã. –°–æ–∑–¥–∞–π—Ç–µ –∏–≥—Ä—É —Å –ø–æ–º–æ—â—å—é –∫–æ–º–∞–Ω–¥—ã /newgame.")
        return

    game = active_games[chat_id]

    if game.state != "waiting":
        await message.answer("–ò–≥—Ä–∞ —É–∂–µ –Ω–∞—á–∞—Ç–∞")
        return

    if message.from_user.id in [player["player_id"] for player in game.players]:
        await message.answer("–í—ã —É–∂–µ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª–∏—Å—å –∫ –∏–≥—Ä–µ.")
        return

    if len(game.players) >= 15:
        await message.answer("–î–æ—Å—Ç–∏–≥–Ω—É—Ç–æ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏–≥—Ä–æ–∫–æ–≤.")
        return

    game.add_player(player_id=message.from_user.id, player_name=message.from_user.first_name, role=None)
    await message.answer(f"–ò–≥—Ä–æ–∫ {message.from_user.first_name} –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª—Å—è –∫ –∏–≥—Ä–µ. –í—Å–µ–≥–æ –∏–≥—Ä–æ–∫–æ–≤: {len(game.players)}")

# –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –≤—ã—Ö–æ–¥–∞ –∏–∑ –∏–≥—Ä—ã
@router.message(Command(commands=['leave']))
async def join_game(message: Message):
    chat_id = message.chat.id

    if chat_id == message.from_user.id:
        return

    if chat_id not in active_games:
        await message.answer("–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π –∏–≥—Ä—ã. –°–æ–∑–¥–∞–π—Ç–µ –∏–≥—Ä—É —Å –ø–æ–º–æ—â—å—é –∫–æ–º–∞–Ω–¥—ã /newgame.")
        return

    game = active_games[chat_id]

    if game.state != "waiting":
        await message.answer("–ò–≥—Ä–∞ —É–∂–µ –Ω–∞—á–∞—Ç–∞")
        return

    if message.from_user.id not in [player["player_id"] for player in game.players]:
        await message.answer("–í—ã –Ω–µ –≤ –∏–≥—Ä–µ.")
        return


    game.del_player(player_id=message.from_user.id)
    await message.answer(f"–ò–≥—Ä–æ–∫ {message.from_user.first_name} –≤—ã—à–µ–ª –∏–∑ –∏–≥—Ä—ã. –í—Å–µ–≥–æ –∏–≥—Ä–æ–∫–æ–≤: {len(game.players)}")

# –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –Ω–∞—á–∞–ª–∞ –∏–≥—Ä—ã
@router.message(Command(commands=['startgame']))
async def start_game(message: Message):
    chat_id = message.chat.id

    if chat_id == message.from_user.id:
        return

    if chat_id not in active_games:
        await message.answer("–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π –∏–≥—Ä—ã. –°–æ–∑–¥–∞–π—Ç–µ –∏–≥—Ä—É —Å –ø–æ–º–æ—â—å—é –∫–æ–º–∞–Ω–¥—ã /newgame.")
        return

    game = active_games[chat_id]

    if game.state != "waiting":
        await message.answer("–ò–≥—Ä–∞ —É–∂–µ –Ω–∞—á–∞—Ç–∞")
        return

    if message.from_user.id != game.creator_id:
        await message.answer("–¢–æ–ª—å–∫–æ —Å–æ–∑–¥–∞—Ç–µ–ª—å –∏–≥—Ä—ã –º–æ–∂–µ—Ç –∑–∞–ø—É—Å—Ç–∏—Ç—å –µ—ë.")
        return

    if len(game.players) < 4:
        await message.answer("–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∏–≥—Ä–æ–∫–æ–≤ –¥–ª—è –Ω–∞—á–∞–ª–∞ –∏–≥—Ä—ã. –ú–∏–Ω–∏–º—É–º 4.")
        return

    try:
        game.start_game()
        player_roles = distribute_roles(game.players)
        #game.player_roles = player_roles

        for player_id, role in player_roles.items():
            await bot.send_message(player_id, f"–í–∞—à–∞ —Ä–æ–ª—å: {role.role_name}. {role.role_desk}")
            if 1 < sum(1 for p in game.players if isinstance(p["role"], (Mafia, DonMafia))) and player_id in [p['player_id'] for p in game.players if isinstance(p["role"], (Mafia, DonMafia))]:
                mtxt = "–í–∞—à–∏ –Ω–∞–ø–∞—Ä–Ω–∏–∫–∏:\n"
                for p in game.players:
                    if isinstance(p["role"], (Mafia, DonMafia)) and p["player_id"] != player_id:
                        mtxt += f"{p['player_name']} {p['role'].role_name}\n"
                await bot.send_message(player_id, mtxt)

        await message.answer("–†–æ–ª–∏ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω—ã, –∏–≥—Ä–∞ –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è! –ù–æ—á–Ω–∞—è —Ñ–∞–∑–∞ –Ω–∞—á–∞–ª–∞—Å—å.")
        await start_night_phase(chat_id)
        #await end_night_phase(chat_id)
    except Exception as e:
        await message.answer(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –∏–≥—Ä—ã: {e}")

@router.message()
async def restrict_non_players(message: Message):
    chat_id = message.chat.id
    current_time = datetime.now()

    if chat_id == message.from_user.id:
        game = next((g for g in active_games.values() if chat_id in [p['player_id'] for p in g.players]), None)
        if game and game.state == "night":
            for p in game.players:
                if p["player_id"] == chat_id and isinstance(p["role"], (Mafia, DonMafia)):
                    mes = message.text
                    writer = message.from_user.first_name
                    for po in game.players:
                        if isinstance(po["role"], (Mafia, DonMafia)) and po["player_id"] != chat_id:
                            await bot.send_message(po["player_id"], f"{writer}: {mes}")
            return

        return
    user_id = message.from_user.id
    if user_id not in user_data:
        user_data[user_id] = {"timestamps": [], "last_message": ""}

    if chat_id in active_games :
        if active_games[chat_id].state == "night":
            for player in active_games[chat_id].players:
                if user_id != player["player_id"] or user_id == active_games[chat_id].lblock_player:
                    if message.chat.is_forum and message.message_thread_id == active_games[chat_id].topic_id:
                        await message.delete()  # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
                        return
                    if not message.chat.is_forum:
                        await message.delete()  # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
                        return
        elif active_games[chat_id].state !=  "waiting":
            game = next((g for g in active_games.values() if user_id in [p['player_id'] for p in g.players]), None)
            if user_id == game.lblock_player or user_id not in [p["player_id"] for p in game.players]:
                await message.delete()  # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
                return

            user = user_data[user_id]
            timestamps = user["timestamps"]
            last_message = user["last_message"]
            # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–µ –∑–∞–ø–∏—Å–∏ (—Å—Ç–∞—Ä—à–µ 10 —Å–µ–∫—É–Ω–¥)
            timestamps = [ts for ts in timestamps if current_time - ts <= timedelta(seconds=10)]
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–ª—É–¥–∞: –Ω–µ –±–æ–ª–µ–µ 4 —Å–æ–æ–±—â–µ–Ω–∏–π –∑–∞ 10 —Å–µ–∫—É–Ω–¥
            if len(timestamps) >= 4:
                return

            # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–ø–∞–º–∞: —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –¥–æ–ª–∂–Ω–æ –ø–æ–≤—Ç–æ—Ä—è—Ç—å—Å—è –ø–æ–¥—Ä—è–¥
            if message.text == last_message:
                return

            # –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ
            timestamps.append(current_time)
            user["timestamps"] = timestamps
            user["last_message"] = message.text

            # –ù–∞—á–∏—Å–ª–µ–Ω–∏–µ –±–∞–ª–ª–æ–≤
            game.update_user_stats(user_id, 1)
            user_data[user_id] = user




# –ù–æ—á–Ω–∞—è —Ñ–∞–∑–∞
async def start_night_phase(chat_id):
    game = active_games[chat_id]
    game.state = "night"
    await bot.send_message(chat_id=game.chat_id, message_thread_id=game.topic_id, text="–ù–æ—á–Ω–∞—è —Ñ–∞–∑–∞: —Ä–æ–ª–∏ –Ω–∞—á–∏–Ω–∞—é—Ç —Å–≤–æ–∏ –¥–µ–π—Å—Ç–≤–∏—è.")
    await notify_roles(game.chat_id, game)

async def notify_roles(chat_id, game):
    for player in game.players:
        role = player["role"]
        buttons = None  # –î–ª—è –∫–∞–∂–¥–æ–≥–æ –∏–≥—Ä–æ–∫–∞ –æ–ø—Ä–µ–¥–µ–ª—è–µ–º —Å–≤–æ–∏ –∫–Ω–æ–ø–∫–∏
        if not isinstance(role, (Villager, Kamikaze)):
            if isinstance(role, Mafia):
                buttons = InlineKeyboardMarkup(
                    inline_keyboard=[
                        [InlineKeyboardButton(
                            text=f"–£–±–∏—Ç—å {target['player_name']}",
                            callback_data=f"action:kill:{target['player_id']}"
                        )] for target in game.players if target["player_id"] != player["player_id"]
                    ]
                )
                await bot.send_message(player["player_id"], "–í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–≥–æ —É–±–∏—Ç—å —ç—Ç–æ–π –Ω–æ—á—å—é:", reply_markup=buttons)
            elif isinstance(role, DonMafia):
                buttons = InlineKeyboardMarkup(
                    inline_keyboard=[
                        [InlineKeyboardButton(
                            text=f"–†–µ—à–∏—Ç—å —Å—É–¥—å–±—É {target['player_name']}",
                            callback_data=f"action:final_kill:{target['player_id']}"
                        )] for target in game.players if target["player_id"] != player["player_id"]
                    ]
                )
                await bot.send_message(player["player_id"], "–í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–≥–æ —É–±–∏—Ç—å —ç—Ç–æ–π –Ω–æ—á—å—é:", reply_markup=buttons)
            elif isinstance(role, Doctor):
                if role.self_heal:
                    buttons = InlineKeyboardMarkup(
                        inline_keyboard=[
                            [InlineKeyboardButton(
                                text=f"–õ–µ—á–∏—Ç—å {target['player_name']}",
                                callback_data=f"action:heal:{target['player_id']}"
                            )] for target in game.players
                        ]
                    )
                else:
                    buttons = InlineKeyboardMarkup(
                        inline_keyboard=[
                            [InlineKeyboardButton(
                                text=f"–õ–µ—á–∏—Ç—å {target['player_name']}",
                                callback_data=f"action:heal:{target['player_id']}"
                            )] for target in game.players if target["player_id"] != player["player_id"]
                        ]
                    )
                await bot.send_message(player["player_id"], "–í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–≥–æ –ª–µ—á–∏—Ç—å —ç—Ç–æ–π –Ω–æ—á—å—é:", reply_markup=buttons)
            elif isinstance(role, Commissioner):
                buttons = InlineKeyboardMarkup(
                    inline_keyboard=[
                        [InlineKeyboardButton(
                            text=f"–ü—Ä–æ–≤–µ—Ä–∏—Ç—å {target['player_name']}",
                            callback_data=f"action:investigate:{target['player_id']}"
                        )] for target in game.players if target["player_id"] != player["player_id"]
                    ]
                )
                await bot.send_message(player["player_id"], "–í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–≥–æ –ø—Ä–æ–≤–µ—Ä–∏—Ç—å —ç—Ç–æ–π –Ω–æ—á—å—é:", reply_markup=buttons)
            elif isinstance(role, Lover):
                buttons = InlineKeyboardMarkup(
                    inline_keyboard=[
                        [InlineKeyboardButton(
                            text=f"–ë–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å {target['player_name']}",
                            callback_data=f"action:block:{target['player_id']}"
                        )] for target in game.players if target["player_id"] != player["player_id"]
                    ]
                )
                await bot.send_message(player["player_id"], "–í—ã–±–µ—Ä–∏—Ç–µ —Å –∫–µ–º –í—ã –±—É–¥–µ—Ç–µ —ç—Ç–æ–π –Ω–æ—á—å—é:", reply_markup=buttons)
            elif isinstance(role, Maniac):
                buttons = InlineKeyboardMarkup(
                    inline_keyboard=[
                        [InlineKeyboardButton(
                            text=f"–ó–∞—Ä–µ–∑–∞—Ç—å {target['player_name']}",
                            callback_data=f"action:m_kill:{target['player_id']}"
                        )] for target in game.players if target["player_id"] != player["player_id"]
                    ]
                )
                await bot.send_message(player["player_id"], "–í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–≥–æ –ø–æ—Ä–µ—à–∞—Ç—å —ç—Ç–æ–π –Ω–æ—á—å—é:", reply_markup=buttons)
            elif isinstance(role, Judge):
                if role.vote_canceled:
                    buttons = InlineKeyboardMarkup(
                        inline_keyboard=[
                            [InlineKeyboardButton(
                                text=f"–û–ø—Ä–∞–≤–¥–∞—Ç—å {target['player_name']}",
                                callback_data=f"action:cancel_vote:{target['player_id']}"
                            )] for target in game.players
                        ] + [[InlineKeyboardButton(text="–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å", callback_data="action:skip")]]
                    )
                await bot.send_message(player["player_id"], "–í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–º—É –¥–∞—Ç—å –∏–º–º—É–Ω–∏—Ç–µ—Ç –æ—Ç –¥–Ω–µ–≤–Ω–æ–≥–æ –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏—è:", reply_markup=buttons)
            elif isinstance(role, Hobo):
                buttons = InlineKeyboardMarkup(
                    inline_keyboard=[
                        [InlineKeyboardButton(
                            text=f"–ü–æ–π—Ç–∏ –∫ {target['player_name']}",
                            callback_data=f"action:start_tracking:{target['player_id']}"
                        )] for target in game.players if target["player_id"] != player["player_id"]
                    ]
                )
                await bot.send_message(player["player_id"], "–í—ã–±–µ—Ä–∏—Ç–µ —É –∫–æ–≥–æ –ø–æ—Å–ø–∞—Ç—å –ø–æ–¥ –¥–≤–µ—Ä—å—é:", reply_markup=buttons)

@router.callback_query(lambda c: c.data.startswith("action:"))
async def handle_action(callback: CallbackQuery):
    player_id = callback.from_user.id
    action = callback.data.split(":")[1]

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –≤ –∫–∞–∫–æ–π –∏–≥—Ä–µ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –∏–≥—Ä–æ–∫
    game = next((g for g in active_games.values() if player_id in [p['player_id'] for p in g.players]), None)
    if not game:
        await callback.answer("–í—ã –Ω–µ —É—á–∞—Å—Ç–≤—É–µ—Ç–µ –≤ —Ç–µ–∫—É—â–µ–π –∏–≥—Ä–µ.", show_alert=True)
        return

    # –ü—Ä–æ–≤–µ—Ä–∫–∞, –Ω–µ —Å–æ–≤–µ—Ä—à–∞–ª –ª–∏ –∏–≥—Ä–æ–∫ —É–∂–µ –¥–µ–π—Å—Ç–≤–∏–µ
    if player_id in [a['player_id'] for a in game.night_actions]:
        await callback.answer("–í—ã —É–∂–µ –≤—ã–±—Ä–∞–ª–∏ –¥–µ–π—Å—Ç–≤–∏–µ!", show_alert=True)
        return

    # –õ–æ–≥–∏–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–µ–π—Å—Ç–≤–∏–π
    if action == "skip":
        game.night_actions.append({"action": action, "player_id": player_id})
        await callback.message.edit_text(text=f"–í—ã –Ω–µ –¥–∞–ª–∏ –Ω–∏–∫–æ–º—É –∏–º–º—É–Ω–∏—Ç–µ—Ç", reply_markup=None)
        return

    target_id = int(callback.data.split(":")[-1])

    game.night_actions.append({"action": action, "player_id": player_id, "target_id": target_id})
    await callback.answer("–í–∞—à–µ –¥–µ–π—Å—Ç–≤–∏–µ –ø—Ä–∏–Ω—è—Ç–æ.")
    t = next(p for p in game.players if p["player_id"] == target_id)
    await callback.message.edit_text(text = f"–í–∞—à –≤—ã–±–æ—Ä {t['player_name']}",reply_markup=None)

    players_with_actions = [p for p in game.players if not isinstance(p["role"], (Villager, Kamikaze))]
    # –û—Ç–ª–∞–¥–æ—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ª–æ–≥–∏–∫–∏
    if any(isinstance(player['role'], Judge) for player in game.players):
        Ju = next(p for p in game.players if isinstance(p["role"], Judge))
        if not Ju["role"].vote_canceled:
            players_with_actions = [p for p in game.players if not isinstance(p["role"], (Villager, Kamikaze, Judge))]


    actions_done = len([p for p in players_with_actions if p['player_id'] in [a['player_id'] for a in game.night_actions]])

    print(f"Players with actions: {players_with_actions}")
    print(f"Night actions: {game.night_actions}")
    print(f"Actions done: {actions_done}")
    print(f"Total players with actions: {len(players_with_actions)}")

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –≤—Å–µ –ª–∏ –∏–≥—Ä–æ–∫–∏ –≤—ã–ø–æ–ª–Ω–∏–ª–∏ –¥–µ–π—Å—Ç–≤–∏—è
    if actions_done == len(players_with_actions):
        await end_night_phase(game.chat_id)
    else:
        print("Not all players have completed their actions yet.")


async def end_night_phase(chat_id):
    game = active_games[chat_id]
    results = game.process_night_actions()
    blocked_players = {action["target_id"] for action in game.night_actions if action["action"] == "block"}
    start_day_text = ""
    for result in results:
        if result["action"] == "kill":
            game.del_player(result["target_id"])
            start_day_text += result["text"] + "\n"

        if result["action"] == "m_kill":
            game.del_player(result["target_id"])
            start_day_text += result["text"] + "\n"

        if result["action"] == "explode":
            game.del_player(result["target_id"])
            start_day_text += result["text"] + "\n"

        if result["action"] == "investigate":
            await bot.send_message(chat_id=result["player_id"], text=result["text"])

        if result["action"] == "start_tracking":
            await bot.send_message(chat_id=result["player_id"], text=result["text"])

    if not any(isinstance(player['role'], DonMafia) for player in game.players) and any(isinstance(player['role'], Mafia) for player in game.players):
        ma = [po for po in game.players if isinstance(po["role"], Mafia)]
        m = random.choice(ma)
        game.change_role(m['player_id'], DonMafia)
        await bot.send_message(chat_id=m['player_id'], text=f"–í–∞—à –î–æ–Ω –ø–æ–≥–∏–±, –≤—ã –∑–∞–Ω–∏–º–∞–µ—Ç–µ –µ–≥–æ –º–µ—Å—Ç–æ. {m['role'].role_desk}")

    if start_day_text != "":
        await bot.send_message(chat_id=game.chat_id, message_thread_id=game.topic_id, text=start_day_text)
    else:
        await bot.send_message(chat_id=game.chat_id, message_thread_id=game.topic_id, text="–≠—Ç–æ–π –Ω–æ—á—å—é –≤—Å—ë —Å–ø–æ–∫–æ–π–Ω–æ")

    if await declare_winner(game):
        return

    game.night_actions = []
    game.state = "day"

    await bot.send_message(chat_id=game.chat_id, message_thread_id=game.topic_id, text="–ù–∞—Å—Ç—É–ø–∞–µ—Ç –¥–µ–Ω—å. –û–±—Å—É–¥–∏—Ç–µ –∏ –≥–æ–ª–æ—Å—É–π—Ç–µ.")
    await asyncio.sleep(60)
    await bot.send_message(chat_id=game.chat_id, message_thread_id=game.topic_id,
                           text="–û–±—Å—É–∂–¥–µ–Ω–∏–µ –∑–∞–∫–æ–Ω—á–∏–ª–æ—Å—å. –í—ã–¥–≤–∏–≥–∞–π—Ç–µ –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤ –Ω–∞ –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏–µ –≤ –ª–∏—á–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏—è—Ö.")
    game.nominations = {}

    for player in game.players:
        if player["player_id"] != game.lblock_player:
            buttons = InlineKeyboardMarkup(
                inline_keyboard=[
                                    [InlineKeyboardButton(text=p["player_name"],
                                                          callback_data=f"nominate:{p['player_id']}")]
                                    for p in game.players if p["player_id"] != player["player_id"] and p["player_id"] != game.vote_canceled
                                ] + [[InlineKeyboardButton(text="–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å", callback_data="nominate:skip")]]
            )
            await bot.send_message(
                player["player_id"],
                "–í—ã–±–µ—Ä–∏—Ç–µ –∏–≥—Ä–æ–∫–∞ –¥–ª—è –Ω–æ–º–∏–Ω–∞—Ü–∏–∏ –∏–ª–∏ –≤–æ–∑–¥–µ—Ä–∂–∏—Ç–µ—Å—å.",
                reply_markup=buttons
            )


# –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–æ–º–∏–Ω–∞—Ü–∏–π
@router.callback_query(lambda c: c.data.startswith("nominate:"))
async def handle_nomination(callback: CallbackQuery):
    nominee_data = callback.data.split(":")[-1]
    player_id = callback.from_user.id

    chat_id = next((g.chat_id for g in active_games.values() if player_id in [p["player_id"] for p in g.players]), None)
    if not chat_id:
        await callback.answer("–í—ã –Ω–µ –≤ –∏–≥—Ä–µ.", show_alert=True)
        return

    game = active_games[chat_id]

    if game.state != "day" or game.nominations.get(player_id):
        await callback.answer("–°–µ–π—á–∞—Å –Ω–µ–ª—å–∑—è –≥–æ–ª–æ—Å–æ–≤–∞—Ç—å", show_alert=True)
        return

    if player_id == game.lblock_player:
        await callback.answer("–í—ã –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω—ã –ª—é–±–æ–≤–Ω–∏—Ü–µ–π –∏ –Ω–µ –º–æ–∂–µ—Ç–µ –≥–æ–ª–æ—Å–æ–≤–∞—Ç—å.", show_alert=True)
        return

    if nominee_data == "skip":
        game.nominations[player_id] = None
        await callback.message.edit_text("–í—ã –≤–æ–∑–¥–µ—Ä–∂–∞–ª–∏—Å—å –æ—Ç –Ω–æ–º–∏–Ω–∞—Ü–∏–∏.", reply_markup=None)
    else:
        nominee_id = int(nominee_data)
        if nominee_id not in [p["player_id"] for p in game.players]:
            await callback.answer("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤—ã–±–æ—Ä.", show_alert=True)
            return
        nominee_name = next(p["player_name"] for p in game.players if p["player_id"] == nominee_id)
        game.nominations[player_id] = nominee_id
        await callback.message.edit_text(f"–í—ã –≤—ã–±—Ä–∞–ª–∏ –∏–≥—Ä–æ–∫–∞ {nominee_name}.", reply_markup=None)
    print(f"Total game.nominations: {len(game.nominations)}")
    print(f"Total players with actions: {len(game.players) - 1 if game.lblock_player else len(game.players)}")
    if len(game.nominations) == (len(game.players) - 1 if game.lblock_player else len(game.players)):
        await process_nominations(chat_id)
    else:
        print("Not all players have completed their actions yet.")

# –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –Ω–æ–º–∏–Ω–∞—Ü–∏–∏
async def process_nominations(chat_id):
    game = active_games[chat_id]

    vote_counts = {}
    for nominee in game.nominations.values():
        if nominee:
            vote_counts[nominee] = vote_counts.get(nominee, 0) + 1

    if not vote_counts:
        await bot.send_message(chat_id=game.chat_id, message_thread_id=game.topic_id, text="–ù–∏–∫—Ç–æ –Ω–µ –±—ã–ª –Ω–æ–º–∏–Ω–∏—Ä–æ–≤–∞–Ω. –î–µ–Ω—å –∑–∞–∫–∞–Ω—á–∏–≤–∞–µ—Ç—Å—è.")
        await start_night_phase(chat_id)
        return

    max_votes = max(vote_counts.values())
    top_nominees = [player_id for player_id, count in vote_counts.items() if count == max_votes]

    if len(top_nominees) > 1:
        await bot.send_message(
            chat_id=game.chat_id,
            message_thread_id=game.topic_id,
            text="–ù–µ—Å–∫–æ–ª—å–∫–æ –∏–≥—Ä–æ–∫–æ–≤ –Ω–æ–º–∏–Ω–∏—Ä–æ–≤–∞–Ω—ã —Å —Ä–∞–≤–Ω—ã–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º –≥–æ–ª–æ—Å–æ–≤. –ù–∏–∫—Ç–æ –Ω–µ –±—É–¥–µ—Ç –ª–∏–Ω—á–µ–≤–∞–Ω. –î–µ–Ω—å –∑–∞–∫–∞–Ω—á–∏–≤–∞–µ—Ç—Å—è."
        )
        await start_night_phase(chat_id)
    else:
        await start_final_vote(chat_id, top_nominees[0])

# –§–∏–Ω–∞–ª—å–Ω–æ–µ –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏–µ
async def start_final_vote(chat_id, nominee_id):
    game = active_games[chat_id]
    game.nominations = {}

    nominee_name = next(p["player_name"] for p in game.players if p["player_id"] == nominee_id)

    buttons = InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text="–î–∞", callback_data=f"final_vote:yes:{nominee_id}"),
             InlineKeyboardButton(text="–ù–µ—Ç", callback_data=f"final_vote:no:{nominee_id}")]
        ]
    )
    await bot.send_message(
        chat_id=game.chat_id,
        message_thread_id=game.topic_id,
        text=f"–ì–æ–ª–æ—Å—É–π—Ç–µ –∑–∞ –∫–∞–∑–Ω—å –∏–≥—Ä–æ–∫–∞ {nominee_name}. –î–∞ –∏–ª–∏ –ù–µ—Ç?",
        reply_markup=buttons
    )

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏—è
@router.callback_query(lambda c: c.data.startswith("final_vote:"))
async def handle_final_vote(callback: CallbackQuery):
    player_id = callback.from_user.id
    data = callback.data.split(":")
    decision = data[1]
    nominee_id = int(data[2])

    game = next((g for g in active_games.values() if player_id in [p["player_id"] for p in g.players]), None)

    if not game or game.state != "day":
        await callback.answer("–°–µ–π—á–∞—Å –Ω–µ–ª—å–∑—è –≥–æ–ª–æ—Å–æ–≤–∞—Ç—å.", show_alert=True)
        return

    if player_id in game.nominations:
        await callback.answer("–í—ã —É–∂–µ –ø—Ä–æ–≥–æ–ª–æ—Å–æ–≤–∞–ª–∏.", show_alert=True)
        return

    if player_id == game.lblock_player:
        await callback.answer("–í—ã –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω—ã –∏ –Ω–µ –º–æ–∂–µ—Ç–µ –≥–æ–ª–æ—Å–æ–≤–∞—Ç—å.", show_alert=True)
        return

    if player_id == nominee_id:
        await callback.answer("–í—ã –Ω–µ –º–æ–∂–µ—Ç–µ –≥–æ–ª–æ—Å–æ–≤–∞—Ç—å –∑–∞ —Å–µ–±—è", show_alert=True)
        return

    game.nominations[player_id] = decision
    await callback.answer("–í–∞—à –≥–æ–ª–æ—Å —É—á—Ç–µ–Ω.")

    if len(game.nominations) == (len(game.players) - 1 if game.lblock_player else len(game.players)):
        await finalize_final_vote(game.chat_id, nominee_id)

# –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ñ–∏–Ω–∞–ª—å–Ω–æ–≥–æ –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏—è
async def finalize_final_vote(chat_id, nominee_id):
    game = active_games[chat_id]
    yes_votes = sum(1 for vote in game.nominations.values() if vote == "yes")
    no_votes = sum(1 for vote in game.nominations.values() if vote == "no")

    nominee_name = next(p["player_name"] for p in game.players if p["player_id"] == nominee_id)

    if yes_votes > no_votes:
        victim = next(p for p in game.players if p["player_id"] == nominee_id)
        game.players.remove(victim)
        await bot.send_message(chat_id=game.chat_id, message_thread_id=game.topic_id, text=f"–ò–≥—Ä–æ–∫ {nominee_name} –±—ã–ª –ª–∏–Ω—á—ë–≤–∞–Ω.")
    else:
        await bot.send_message(chat_id=game.chat_id, message_thread_id=game.topic_id, text=f"–ò–≥—Ä–æ–∫ {nominee_name} –æ—Å—Ç–∞–ª—Å—è –∂–∏–≤.")

    if not await declare_winner(game):
        await start_night_phase(chat_id)


# –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ä–æ–ª–µ–π
def distribute_roles(players):
    num_players = len(players)
    roles = []

    if num_players <= 6:
        roles = [DonMafia(None), Commissioner(None), Doctor(None)] + [Villager(None)] * (num_players - 3)
    elif num_players <= 9:
        roles = [Mafia(None), DonMafia(None), Commissioner(None), Doctor(None), Lover(None)] + [Villager(None)] * (num_players - 5)
    elif num_players <= 12:
        roles = [DonMafia(None), Commissioner(None), Doctor(None), Lover(None), Kamikaze(None), Hobo(None)] + [Villager(None)] * (num_players - 8) + [Mafia(None)]* 2
    elif num_players <= 15:
        roles = [DonMafia(None), Commissioner(None), Doctor(None), Lover(None), Kamikaze(None), Hobo(None), Judge(None), Maniac(None)] + [Villager(None)] * (num_players - 11) + [Mafia(None)]* 3


    random.shuffle(players)
    random.shuffle(roles)

    player_roles = {}
    for player, role in zip(players, roles):
        player["role"] = role
        role.player_id = player["player_id"]
        player_roles[player["player_id"]] = role

    return player_roles


async def declare_winner(game):
    winner = game.check_winner()
    if winner:
        if winner == "peaceful":
            text = "–ú–∏—Ä–Ω—ã–µ –∂–∏—Ç–µ–ª–∏ –ø–æ–±–µ–¥–∏–ª–∏! –ú–∞—Ñ–∏—è —É–Ω–∏—á—Ç–æ–∂–µ–Ω–∞."
        elif winner == "mafia":
            text = "–ú–∞—Ñ–∏—è –ø–æ–±–µ–¥–∏–ª–∞! –ú–∏—Ä–Ω—ã–µ –∂–∏—Ç–µ–ª–∏ –ø—Ä–æ–∏–≥—Ä–∞–ª–∏."
        elif winner == "maniac":
            text = "–ú–∞–Ω—å—è–∫ –ø–æ–±–µ–¥–∏–ª!"
        await bot.send_message(chat_id=game.chat_id, message_thread_id=game.topic_id, text=text)
        del active_games[game.chat_id]  # –ó–∞–≤–µ—Ä—à–∞–µ–º –∏–≥—Ä—É –∏ —É–¥–∞–ª—è–µ–º –∏–∑ –∞–∫—Ç–∏–≤–Ω—ã—Ö
        game.end_game()
        del game
        return True


# –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –º–∞—Ä—à—Ä—É—Ç–∏–∑–∞—Ç–æ—Ä–∞
dp.include_router(router)

# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
if __name__ == "__main__":
    import asyncio

    async def main():
        await bot.delete_webhook(drop_pending_updates=True)
        await dp.start_polling(bot)

    asyncio.run(main())
